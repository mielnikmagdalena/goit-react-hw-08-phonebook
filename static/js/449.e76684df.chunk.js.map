{"version":3,"file":"static/js/449.e76684df.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","redux/filter/selectors.js","components/ScrollButton/ScrollButton.styled.js","components/ScrollButton/ScrollButton.jsx","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","pages/Phonebook/Phonebook.js","styled/Form.js","styled/Input.js","styled/LabelContainer.js"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"formBox\":\"ContactForm_formBox__cXiHe\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from '../../redux/contacts/operations';\nimport {\n  doubledContactNotification,\n  addedContactNotification,\n} from 'utils/notifications';\nimport Button from 'styled/Button';\nimport Input from 'styled/Input';\nimport LabelContainer from 'styled/LabelContainer';\nimport Form from 'styled/Form';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n\n    let isContact;\n    contacts.forEach(person => {\n      if (form.name.value.toLowerCase() === person.name.toLowerCase()) {\n        isContact = true;\n      }\n    });\n    if (isContact) {\n      doubledContactNotification(form.name.value);\n    }\n    if (!isContact) {\n      dispatch(\n        addContact({\n          name: form.name.value,\n          number: form.number.value,\n        })\n      );\n      addedContactNotification(form.name.value);\n    }\n    form.reset();\n  };\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  return (\n    <Form className={css.formBox} onSubmit={handleSubmit}>\n      <LabelContainer>\n        <label className={css.label} htmlFor={nameInputId}>\n          Name\n        </label>\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Enter name\"\n          pattern=\"^[a-zA-Zа-яА-Я\\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]+(([' \\-][a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C])?[a-zA-Zа-яА-Я \\u0104\\u0105\\u0106\\u0107\\u0118\\u0119\\u0141\\u0142\\u0143\\u0144\\u00D3\\u00F3\\u015A\\u015B\\u0179\\u017A\\u017B\\u017C]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </LabelContainer>\n      <LabelContainer>\n        <label className={css.label} htmlFor={numberInputId}>\n          Number\n        </label>\n        <Input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Enter number\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </LabelContainer>\n      <Button type=\"submit\" name=\"submit\">\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { nanoid } from 'nanoid';\nimport css from './Filter.module.css';\nimport Input from 'styled/Input';\nimport LabelContainer from 'styled/LabelContainer';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterId = nanoid();\n\n  const handleChange = event => {\n    dispatch(setFilter(event.currentTarget.value));\n  };\n\n  return (\n    <div className={css.filter}>\n      <LabelContainer>\n        <label htmlFor={filterId}>Find contacts</label>\n        <Input\n          id={filterId}\n          type=\"search\"\n          placeholder=\"Enter name\"\n          onChange={event => handleChange(event)}\n        />\n      </LabelContainer>\n    </div>\n  );\n};\n\nexport default Filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return [...contacts]\n      .sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      })\n      .filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n  }\n);\n","import styled from 'styled-components';\n\nexport const Button = styled.div`\n  position: fixed;\n  width: 100%;\n  left: 50%;\n  bottom: 40px;\n  height: 20px;\n  font-size: 3rem;\n  z-index: 25;\n  cursor: pointer;\n  color: rgba(55, 0, 201, 0.5);\n`;\n","import React, { useState } from 'react';\nimport { FaArrowCircleUp } from 'react-icons/fa';\nimport { Button } from './ScrollButton.styled';\n\nconst ScrollButton = () => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisible = () => {\n    const scrolled = document.documentElement.scrollTop;\n    if (scrolled > 100) {\n      setVisible(true);\n    } else if (scrolled <= 100) {\n      setVisible(false);\n    }\n  };\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  };\n\n  window.addEventListener('scroll', toggleVisible);\n\n  return (\n    <Button>\n      <FaArrowCircleUp\n        onClick={scrollToTop}\n        style={{ display: visible ? 'inline' : 'none' }}\n      />\n    </Button>\n  );\n};\n\nexport default ScrollButton;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsList\":\"ContactsList_contactsList__ZQI1L\",\"title\":\"ContactsList_title__Nc-fb\"};","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from '../../redux/contacts/selectors.js';\nimport { selectFilteredContacts } from 'redux/filter/selectors.js';\nimport Loader from 'components/Loader/Loader.js';\nimport ContactsListElement from '../ContactslistElement/ContactsListElement';\nimport ScrollButton from 'components/ScrollButton/ScrollButton.jsx';\nimport css from './ContactsList.module.css';\n\nconst ContactsList = () => {\n  const items = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsLoading);\n\n  return (\n    <div className={css.contactsListBox}>\n      <h4 className={css.title}>\n        You have {items.length} contact{items.length === 1 ? null : 's'}\n      </h4>\n      <ul className={css.contactsList}>\n        {!!isLoading && <Loader />}\n        {!!items &&\n          items.map(contact => (\n            <li key={contact.id}>\n              <ContactsListElement contact={contact} />\n            </li>\n          ))}\n        <ScrollButton />\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { selectError } from 'redux/contacts/selectors';\nimport Loader from 'components/Loader/Loader';\n//import css from './Phonebook.module.css';\n\nexport default function Phonebook() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Phonebook</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <ContactsList />\n      {!!isLoading && !error && <Loader />}\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nconst Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 320px;\n  font-family: Coiny;\n  gap: 12px;\n\n  @media screen and (min-width: 520px) {\n    & {\n      align-items: flex-start;\n    }\n  }\n`;\n\nexport default Form;\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  min-width: 280px;\n  width: 100%;\n  height: 30px;\n  margin-bottom: 10px;\n  padding: 0 15px;\n  border-radius: 15px;\n  outline: none;\n  border: none;\n  color: rgb(89, 22, 153);\n\n  &::placeholder {\n    color: rgba(138, 43, 226, 0.3);\n  }\n`;\n\nexport default Input;\n","import styled from 'styled-components';\n\nconst LabelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  font-family: Coiny;\n  color: violet;\n  gap: 4px;\n`;\n\nexport default LabelContainer;\n"],"names":["selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","dispatch","useDispatch","useSelector","nameInputId","nanoid","numberInputId","Form","className","css","onSubmit","event","preventDefault","isContact","form","target","forEach","person","name","value","toLowerCase","doubledContactNotification","addContact","number","addedContactNotification","reset","LabelContainer","htmlFor","Input","id","type","placeholder","pattern","title","required","Button","filterId","onChange","setFilter","currentTarget","handleChange","selectFilteredContacts","createSelector","filter","sort","a","b","localeCompare","contact","includes","styled","useState","visible","setVisible","window","addEventListener","scrolled","document","documentElement","scrollTop","onClick","scrollTo","top","behavior","style","display","length","Loader","map","Phonebook","useEffect","fetchContacts"],"sourceRoot":""}